<?xml version="1.0"?>
<launch>

<!--map server-->
<arg name="map_file" default="$(find my_robot)/maps/map.yaml"/>
<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

<!--AMCL Node-->
<node name="amcl" pkg="amcl" type="amcl" output="screen">      
	<remap from="scan" to="/scan"/>
	<!--#Which frame to use for odometry-->
		
   	<param name="odom_frame_id" value="odom"/>
        <!--param name="odom_model_type" value="diff-corrected"/-->
			<param name="odom_model_type" value="diff"/>
			<!--If ~odom_model_type is "diff" then we use the sample_motion_model_odometry algorithm from Probabilistic Robotics, p136; 				this model uses the noise parameters odom_alpha1 through odom_alpha4, as defined in the book-->
        <param name="base_frame_id" value="robot_footprint"/>
        <param name="global_frame_id" value="map"/>
<!--_____________________________________________________________________________________________________-->
<!--####Publish scans from best pose at a max of 10 Hz -->
	<!--#Translation-related noise parameter (only used if model is "omni")-->
   	<!--param name="odom_alpha5" value="0.1"/-->
	<!--#Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.  -->
   	<!--param name="gui_publish_rate" value="10.0"/-->
	<!--#How many evenly-spaced beams in each scan to be used when updating the filter-->
   	<param name="laser_max_beams" value="60"/>
	<!--#Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used.-->
	<param name="laser_min_range" value="0.1"/>
	<!--#Maximum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used.-->
   	<param name="laser_max_range" value="-1.0"/>
	<!--#Minimum allowed number of particles-->
  	<param name="min_particles" value="200"/>
	<!--#Maximum allowed number of particles-->
   	<param name="max_particles" value="1000"/>
	<!--#Max error between the true distribution and the estimated distribution-->
   	<param name="kld_err" value="0.01"/>
	<!--#Upper standard normal quantile for(1-p),p is the probability that the error on the estimated distrubition will be less than kld_err-->
   	<param name="kld_z" value="0.99"/>
	<!--#Specifies the expected noise in odometry's rotation estimate from rotational component of the robot's motion-->
   	<param name="odom_alpha1" value="0.0"/>
	<!--#Specifies the expected noise in odometry's rotation estimate from translational component of the robot's motion.-->
   	<param name="odom_alpha2" value="0.0"/>
<!--_____________________________________________________________________________________________________-->
<!--####translation std dev, m -->
	<!--#Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion-->
   	<param name="odom_alpha3" value="0.0"/>
	<!--#Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion--> 
   	<param name="odom_alpha4" value="0.0"/>
	<!--#Mixture weight for the z_hit part of the model-->
   	<param name="laser_z_hit" value="0.85"/>
	<!--#Mixture weight for the z_short part of the model-->
   	<param name="laser_z_short" value="0.05"/>
	<!--#Mixture weight for the z_max part of the model-->
   	<param name="laser_z_max" value="0.05"/>
	<!--#Mixture weight for the z_max part of the model-->
   	<param name="laser_z_rand" value="0.15"/>
	<!--#Standard deviation for Gaussian model used in z_hit part of the model-->
   	<param name="laser_sigma_hit" value="0.1"/>
	<!--#Exponential decay parameter for z_short part of model-->
   	<param name="laser_lambda_short" value="0.1"/>
	<!--#Which model to use, either 'beam', likelihood_field, or likelihood_field_prob (same as likelihood_field but incorporates the beamskip 	feature, if enabled)--> 
   	<!--param name="laser_model_type" value="likelihood_field"/-->
			 <!--param name="laser_model_type" value="beam"/--> 

	<!--#Maximum distance to do obstacle inflation on map, for use in likelihood_field model-->
   	<!--param name="laser_likelihood_max_dist" value="5.0"/-->
	<!--#Translational movement required before performing a filter update-->
   	<param name="update_min_d" value="0.1"/>
	<!--#Rotational movement required before performing a filter update-->
   	<param name="update_min_a" value="3.1416/12.0"/>
	<!--#Number of filter updates required before resampling-->
   	<param name="resample_interval" value="2"/>
<!--_____________________________________________________________________________________________________-->
<!--####Increase tolerance because the computer can get quite busy -->
	<!--Time with which to post-date the transform that is published, to indicate that this transform is valid into the future-->
   	<param name="transform_tolerance" value="0.9"/>
	<!--Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 		0.001.-->
   	<param name="recovery_alpha_slow" value="0.0"/>
	<!--Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 		0.1-->
   	<param name="recovery_alpha_fast" value="0.0"/>
<!--_____________________________________________________________________________________________________-->	
<!--####if i choose to define the initial pose here-->
	<param name="initial_pose_x" value="-5.256984"/>
	<param name="initial_pose_y" value="-4.485685"/>
</node>

<!--Move base-->
<node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen">
	<remap from="scan" to="/scan"/>
	<param name="base_global_planner" value="navfn/NavfnROS"/>
	<param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>

	<rosparam file="$(find my_robot)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
  	<rosparam file="$(find my_robot)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
  	<rosparam file="$(find my_robot)/config/local_costmap_params.yaml" command="load" />
  	<rosparam file="$(find my_robot)/config/global_costmap_params.yaml" command="load" />
  	<rosparam file="$(find my_robot)/config/base_local_planner_params.yaml" command="load" />
</node>

</launch>

